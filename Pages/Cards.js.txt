
import React, { useState, useEffect } from 'react';
import { User, UserStats, Player, PlayerCard as PlayerCardEntity } from '@/entities/all';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Coins, Package, Search, Sparkles, ArrowUp, Zap } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import CardPack from '../components/cards/CardPack';
import PlayerCard from '../components/cards/PlayerCard';

const PACK_TYPES = {
  basic: { name: 'Basic Pack', cost: 50, cards: 3, rareChance: 15, epicChance: 3, legendaryChance: 0.5 },
  premium: { name: 'Premium Pack', cost: 150, cards: 5, rareChance: 35, epicChance: 12, legendaryChance: 2 },
  legendary: { name: 'Legendary Pack', cost: 500, cards: 10, rareChance: 60, epicChance: 30, legendaryChance: 8 }
};

const LEVEL_UP_COST = (level) => 5 + Math.floor(level * 1.5);

export default function CardsPage() {
  const [user, setUser] = useState(null);
  const [userStats, setUserStats] = useState(null);
  const [allPlayers, setAllPlayers] = useState([]);
  const [userCards, setUserCards] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterRarity, setFilterRarity] = useState('all');
  const [isOpening, setIsOpening] = useState(false);
  const [newCards, setNewCards] = useState([]);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      const userData = await User.me();
      setUser(userData);
      
      const statsData = await UserStats.list();
      if (statsData.length > 0) {
        setUserStats(statsData[0]);
      } else {
        const newStats = await UserStats.create({});
        setUserStats(newStats);
      }
      
      const players = await Player.list();
      setAllPlayers(players);
      
      const cards = await PlayerCardEntity.list();
      setUserCards(cards);
    } catch (error) {
      console.error('Error loading data:', error);
    }
  };

  const generateCard = (packType) => {
    const packConfig = PACK_TYPES[packType];
    
    // Generate a random number between 0 and 100 for rarity check
    const rand = Math.random() * 100; 
    let rarity = 'common';
    
    // Determine rarity based on chances (higher chances are checked first, for exclusive ranges)
    if (rand < packConfig.legendaryChance) rarity = 'legendary';
    else if (rand < packConfig.epicChance) rarity = 'epic';
    else if (rand < packConfig.rareChance) rarity = 'rare';
    
    console.log(`Generated ${rarity} card (roll: ${rand.toFixed(2)})`);
    
    // Define stat ranges based on rarity
    const rarityStats = {
      common: { min: 35, max: 60 },
      rare: { min: 55, max: 75 },
      epic: { min: 70, max: 85 },
      legendary: { min: 80, max: 95 }
    }[rarity];
    
    const positions = ['goalkeeper', 'striker'];
    const position = positions[Math.floor(Math.random() * positions.length)];
    
    // Expanded name lists for more variety
    const firstNames = [
      'Marco', 'Diego', 'Alex', 'Roberto', 'Kevin', 'Carlos', 'Luis', 'Andre',
      'Miguel', 'David', 'Paulo', 'Fernando', 'Antonio', 'Juan', 'Pedro',
      'Rafael', 'Gabriel', 'Lucas', 'Mateo', 'Eduardo', 'Jose', 'Manuel'
    ];
    
    const lastNames = [
      'Silva', 'Torres', 'Chen', 'Martinez', 'Johnson', 'Mendoza', 'Garcia',
      'Santos', 'Rodriguez', 'Kim', 'Costa', 'Lopez', 'Ruiz', 'Morales',
      'Gonzalez', 'Oliveira', 'Pereira', 'da Silva', 'Rossi', 'Vargas'
    ];
    
    // Updated team list
    const teams = [
      'Real Madrid', 'Barcelona', 'Manchester United', 'Liverpool', 'Bayern Munich',
      'PSG', 'Chelsea', 'Arsenal', 'Juventus', 'AC Milan', 'Manchester City',
      'Atletico Madrid', 'Borussia Dortmund', 'Inter Milan', 'Napoli'
    ];
    
    // Updated abilities list
    const abilities = [
      'Power Shot', 'Curve Master', 'Lightning Speed', 'Perfect Timing',
      'Mental Focus', 'Pressure Immunity', 'Precision Strike', 'Goal Magnet',
      'Reflex Boost', 'Diving Expert', 'Shot Stopper', 'Command Area'
    ];
    
    // Updated countries list
    const countries = [
      'Brazil', 'Argentina', 'Spain', 'France', 'Germany', 'Italy',
      'England', 'Portugal', 'Netherlands', 'Belgium', 'Mexico', 'Colombia'
    ];
    
    return {
      name: `${firstNames[Math.floor(Math.random() * firstNames.length)]} ${lastNames[Math.floor(Math.random() * lastNames.length)]}`,
      position,
      rarity,
      // Generate stats within the rarity's min/max range, inclusive
      power: Math.floor(Math.random() * (rarityStats.max - rarityStats.min + 1)) + rarityStats.min,
      speed: Math.floor(Math.random() * (rarityStats.max - rarityStats.min + 1)) + rarityStats.min,
      accuracy: Math.floor(Math.random() * (rarityStats.max - rarityStats.min + 1)) + rarityStats.min,
      special_ability: abilities[Math.floor(Math.random() * abilities.length)],
      team: teams[Math.floor(Math.random() * teams.length)],
      nationality: countries[Math.floor(Math.random() * countries.length)]
    };
  };

  const openPack = async (packType) => {
    if (!userStats || isOpening) {
      console.log('Cannot open pack - no user stats or already opening');
      return;
    }
    
    const pack = PACK_TYPES[packType];
    const cost = pack.cost;
    const cardCount = pack.cards;
    
    if (userStats.coins < cost) {
      console.log(`Not enough coins: ${userStats.coins} < ${cost}`);
      return;
    }
    
    console.log(`Opening ${packType} pack for ${cost} coins`);
    setIsOpening(true);
    
    try {
      // Deduct coins immediately
      const newCoinAmount = userStats.coins - cost;
      await UserStats.update(userStats.id, {
        coins: newCoinAmount
      });
      
      // Update local state immediately to reflect deducted coins
      setUserStats(prev => ({ ...prev, coins: newCoinAmount }));
      
      // Generate new cards
      const generatedCards = [];
      for (let i = 0; i < cardCount; i++) {
        const cardData = generateCard(packType);
        console.log(`Generated card ${i + 1}:`, cardData);
        
        // Create player and link it to a PlayerCard entity
        const newPlayer = await Player.create(cardData);
        const newCard = await PlayerCardEntity.create({ 
          player_id: newPlayer.id,
          quantity: 1
        });
        generatedCards.push({ 
          ...newPlayer, 
          cardId: newCard.id, 
          isNew: true 
        });
      }
      
      console.log(`Successfully generated ${generatedCards.length} cards`);
      setNewCards(generatedCards);
      
      // Show cards animation for 5 seconds
      setTimeout(() => {
        setNewCards([]); // Clear new cards after animation
        setIsOpening(false); // Allow opening new packs
        loadData(); // Reload all data to reflect new cards in collection
        console.log('Pack opening complete');
      }, 5000); // Changed from 4000 to 5000
      
    } catch (error) {
      console.error('Error opening pack:', error);
      setIsOpening(false);
      
      // Refund coins on error
      if (userStats) {
        await UserStats.update(userStats.id, {
          coins: userStats.coins + cost
        });
        // Update local state to reflect refunded coins
        setUserStats(prev => ({ ...prev, coins: prev.coins + cost }));
      }
    }
  };

  const levelUpPlayer = async (playerCard) => {
    if (!userStats || !playerCard) return;
    
    const cost = LEVEL_UP_COST(playerCard.cardInfo.level);
    if (userStats.upgrade_points < cost) {
      alert("Not enough upgrade points!");
      return;
    }
    
    try {
      // Update player stats
      const newPower = playerCard.power + Math.floor(Math.random() * 2) + 1; // +1 or +2
      const newSpeed = playerCard.speed + Math.floor(Math.random() * 2) + 1;
      const newAccuracy = playerCard.accuracy + Math.floor(Math.random() * 2) + 1;
      
      await Player.update(playerCard.id, {
        power: Math.min(100, newPower),
        speed: Math.min(100, newSpeed),
        accuracy: Math.min(100, newAccuracy),
      });

      // Update card level
      await PlayerCardEntity.update(playerCard.cardInfo.id, {
        level: playerCard.cardInfo.level + 1,
      });

      // Update user stats
      await UserStats.update(userStats.id, {
        upgrade_points: userStats.upgrade_points - cost,
      });

      alert(`${playerCard.name} leveled up!`);
      await loadData();

    } catch (e) {
      console.error("Level up failed:", e);
      alert("Level up failed. Please try again.");
    }
  };

  const getUserPlayerCards = () => {
    return userCards.map(card => {
      const player = allPlayers.find(p => p.id === card.player_id);
      return player ? { ...player, cardInfo: card } : null;
    }).filter(Boolean);
  };

  const filteredCards = getUserPlayerCards().filter(playerCard => {
    const matchesSearch = playerCard.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         playerCard.team?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesRarity = filterRarity === 'all' || playerCard.rarity === filterRarity;
    
    return matchesSearch && matchesRarity;
  });

  if (!user) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-white">Card Collection</h1>
            <p className="text-purple-300 mt-1">Collect, upgrade, and build your ultimate team</p>
          </div>
          <div className="flex items-center gap-6">
             <div className="flex items-center gap-2 bg-black/30 backdrop-blur-md rounded-lg px-4 py-2 border border-purple-500/20">
              <Zap className="w-5 h-5 text-green-400" />
              <span className="text-white font-bold">{userStats?.upgrade_points || 0}</span>
              <span className="text-purple-300">points</span>
            </div>
            {userStats && (
              <div className="flex items-center gap-2 bg-black/30 backdrop-blur-md rounded-lg px-6 py-3 border border-purple-500/20">
                <Coins className="w-6 h-6 text-yellow-500" />
                <span className="text-white font-bold text-lg">{userStats.coins}</span>
                <span className="text-purple-300">coins</span>
              </div>
            )}
          </div>
        </div>

        <Tabs defaultValue="collection" className="space-y-6">
          <TabsList className="bg-black/30 backdrop-blur-md border border-purple-500/20">
            <TabsTrigger value="collection" className="text-white data-[state=active]:bg-purple-500">
              <Search className="w-4 h-4 mr-2" />
              My Collection ({userCards.length})
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="collection">
            <div className="space-y-6">
              <div className="flex flex-col md:flex-row gap-4">
                <div className="flex-1 relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                  <Input
                    placeholder="Search cards..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10 bg-black/30 backdrop-blur-md border-purple-500/20 text-white placeholder:text-gray-400"
                  />
                </div>
                <select
                  value={filterRarity}
                  onChange={(e) => setFilterRarity(e.target.value)}
                  className="px-4 py-2 bg-black/30 backdrop-blur-md border border-purple-500/20 rounded-md text-white"
                >
                  <option value="all">All Rarities</option>
                  <option value="common">Common</option>
                  <option value="rare">Rare</option>
                  <option value="epic">Epic</option>
                  <option value="legendary">Legendary</option>
                </select>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
                {filteredCards.map((playerCard) => (
                  <PlayerCard 
                    key={playerCard.cardInfo.id} 
                    player={playerCard}
                    onLevelUp={() => levelUpPlayer(playerCard)}
                    levelUpCost={LEVEL_UP_COST(playerCard.cardInfo.level)}
                    upgradePoints={userStats?.upgrade_points || 0}
                  />
                ))}
              </div>
              
              {filteredCards.length === 0 && userCards.length === 0 && (
                <div className="text-center py-12">
                  <Package className="w-16 h-16 mx-auto text-gray-400 mb-4" />
                  <h3 className="text-xl font-semibold text-white mb-2">No Cards Yet</h3>
                  <p className="text-purple-300 mb-4">
                    Open some packs to start your collection!
                  </p>
                  <Button 
                    onClick={() => document.querySelector('[data-state="active"][value="packs"]')?.click()}
                    className="bg-gradient-to-r from-blue-500 to-purple-600"
                  >
                    Open Your First Pack
                  </Button>
                </div>
              )}
              
              {filteredCards.length === 0 && userCards.length > 0 && (
                <div className="text-center py-12">
                  <Search className="w-16 h-16 mx-auto text-gray-400 mb-4" />
                  <h3 className="text-xl font-semibold text-white mb-2">No Cards Match Your Search</h3>
                  <p className="text-purple-300">
                    Try adjusting your search terms or filters.
                  </p>
                </div>
              )}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
