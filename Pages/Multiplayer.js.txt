
import React, { useState, useEffect } from 'react';
import { User, UserStats, MultiplayerMatch } from '@/entities/all';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Users, Search, Swords, Trophy, Clock, Wifi, Copy, UserPlus } from 'lucide-react';
import PenaltyGame from '../components/game/PenaltyGame';

export default function MultiplayerPage() {
  const [user, setUser] = useState(null);
  const [userStats, setUserStats] = useState(null);
  const [gameState, setGameState] = useState('menu'); // menu, creating, waiting, playing, finished
  const [currentMatch, setCurrentMatch] = useState(null);
  const [roomCode, setRoomCode] = useState('');
  const [pollingInterval, setPollingInterval] = useState(null);
  const [shotResult, setShotResult] = useState(null);

  useEffect(() => {
    loadUserData();
    
    // Check for an active match when the component loads
    findActiveMatch();

    return () => {
      if (pollingInterval) {
        clearInterval(pollingInterval);
      }
    };
  }, []);

  const loadUserData = async () => {
    try {
      const userData = await User.me();
      setUser(userData);
      
      const statsData = await UserStats.list();
      if (statsData.length > 0) {
        setUserStats(statsData[0]);
      } else {
        const newStats = await UserStats.create({});
        setUserStats(newStats);
      }
    } catch (error) {
      console.error('Error loading user data:', error);
    }
  };

  const findActiveMatch = async () => {
    const userData = await User.me();
    const p1Matches = await MultiplayerMatch.filter({ player1_id: userData.id, status: 'waiting' });
    const p2Matches = await MultiplayerMatch.filter({ player2_id: userData.id, status: 'playing' });
    
    let activeMatch = null;
    if (p1Matches.length > 0) {
      activeMatch = p1Matches[0];
      setGameState('waiting');
    } else if (p2Matches.length > 0) {
      activeMatch = p2Matches[0];
      setGameState('playing');
    }

    if (activeMatch) {
      setCurrentMatch(activeMatch);
      setRoomCode(activeMatch.room_id);
      startMatchPolling(activeMatch.id);
    }
  };

  const generateRoomCode = () => {
    return Math.random().toString(36).substring(2, 8).toUpperCase();
  };

  const createRoom = async () => {
    const newRoomCode = generateRoomCode();
    try {
      const match = await MultiplayerMatch.create({
        room_id: newRoomCode,
        player1_id: user.id,
        status: 'waiting'
      });
      
      setCurrentMatch(match);
      setRoomCode(newRoomCode);
      setGameState('waiting');
      
      startMatchPolling(match.id);
    } catch (error) {
      console.error('Error creating room:', error);
      alert('Failed to create room. Please try again.');
    }
  };

  const joinRoom = async () => {
    if (!roomCode.trim()) {
      alert('Please enter a room code');
      return;
    }

    try {
      const matches = await MultiplayerMatch.filter({ room_id: roomCode.toUpperCase(), status: 'waiting' });
      
      if (matches.length === 0) {
        alert('Room not found or already in progress.');
        return;
      }

      const match = matches[0];
      
      if (match.player1_id === user.id) {
        alert('You cannot join your own room.');
        return;
      }

      // Join the match
      const updatedMatch = await MultiplayerMatch.update(match.id, {
        player2_id: user.id,
        status: 'playing'
      });

      setCurrentMatch(updatedMatch);
      setGameState('playing');
      startMatchPolling(updatedMatch.id);
    } catch (error) {
      console.error('Error joining room:', error);
      alert('Failed to join room. Please try again.');
    }
  };

  const startMatchPolling = (matchId) => {
    if (pollingInterval) clearInterval(pollingInterval);

    const interval = setInterval(async () => {
      try {
        const matches = await MultiplayerMatch.filter({ id: matchId });
        if (matches.length > 0) {
          const updatedMatch = matches[0];
          
          if (JSON.stringify(updatedMatch) !== JSON.stringify(currentMatch)) {
            setCurrentMatch(updatedMatch);
          }
          
          if (updatedMatch.status === 'playing' && gameState === 'waiting') {
            setGameState('playing');
          }
          
          if (updatedMatch.status === 'finished') {
            setGameState('finished');
            clearInterval(interval);
            setPollingInterval(null);
          }
        } else {
          // Match not found, maybe it was cancelled
          leaveMatch();
        }
      } catch (error) {
        console.error('Error polling match:', error);
        clearInterval(interval);
        setPollingInterval(null);
      }
    }, 2500);
    
    setPollingInterval(interval);
  };

  const isMyTurn = () => {
    if (!currentMatch || !user) return false;
    
    if (currentMatch.current_turn === 'player1' && currentMatch.player1_id === user.id) return true;
    if (currentMatch.current_turn === 'player2' && currentMatch.player2_id === user.id) return true;
    
    return false;
  };

  const handleShot = async (result) => {
    if (!currentMatch || !isMyTurn()) return;

    setShotResult(result);
    
    try {
      const isPlayer1 = currentMatch.player1_id === user.id;
      let newScore = isPlayer1 ? currentMatch.player1_score : currentMatch.player2_score;
      if (result === 'goal') {
        newScore++;
      }
      
      const newShotsHistory = [
        ...(currentMatch.shots_taken || []),
        {
          player_id: user.id,
          result: result,
          round: currentMatch.round
        }
      ];

      let nextTurn = currentMatch.current_turn === 'player1' ? 'player2' : 'player1';
      let nextRound = currentMatch.round;
      let matchStatus = currentMatch.status;
      let winner = null;

      if (currentMatch.current_turn === 'player2') {
        nextRound++;
      }
      
      if (nextRound > 5) {
        matchStatus = 'finished';
        const p1Score = isPlayer1 ? newScore : currentMatch.player1_score;
        const p2Score = !isPlayer1 ? newScore : currentMatch.player2_score;

        if (p1Score > p2Score) winner = currentMatch.player1_id;
        else if (p2Score > p1Score) winner = currentMatch.player2_id;
        else winner = 'draw';
      }

      const updateData = {
        shots_taken: newShotsHistory,
        current_turn: nextTurn,
        round: nextRound,
        status: matchStatus,
        ...(isPlayer1 ? { player1_score: newScore } : { player2_score: newScore }),
        ...(winner && { winner })
      };

      const updatedMatch = await MultiplayerMatch.update(currentMatch.id, updateData);
      setCurrentMatch(updatedMatch);
      
      setTimeout(() => setShotResult(null), 3000);
      
    } catch (error) {
      console.error('Error updating match:', error);
    }
  };

  const copyRoomCode = () => {
    navigator.clipboard.writeText(roomCode);
    alert('Room code copied to clipboard!');
  };

  const leaveMatch = async () => {
    if (pollingInterval) {
      clearInterval(pollingInterval);
      setPollingInterval(null);
    }

    if (currentMatch && currentMatch.status !== 'finished') {
      // Logic to abandon the match
      try {
        await MultiplayerMatch.update(currentMatch.id, { status: 'finished', winner: 'abandoned' });
      } catch (e) { console.error("Could not abandon match", e)}
    }
    
    setCurrentMatch(null);
    setGameState('menu');
    setRoomCode('');
    setShotResult(null);
  };

  if (!user || !userStats) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4 md:p-8">
      <div className="max-w-6xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-white mb-2">Multiplayer Arena</h1>
            <p className="text-purple-300">Challenge players in real-time penalty shootouts</p>
          </div>
          <div className="flex items-center gap-2 bg-black/30 backdrop-blur-md rounded-lg px-4 py-2 border border-purple-500/20">
            <Wifi className="w-5 h-5 text-green-500" />
            <span className="text-white font-medium">Online</span>
          </div>
        </div>

        {gameState === 'menu' && (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Create/Join Room */}
            <Card className="bg-black/20 backdrop-blur-md border border-purple-500/20">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Swords className="w-6 h-6" />
                  Start Match
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="text-center space-y-4">
                  <Button
                    onClick={createRoom}
                    className="w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 py-6 text-base"
                  >
                    <UserPlus className="w-5 h-5 mr-2" />
                    Create Private Room
                  </Button>
                  <p className="text-purple-300 text-sm">Create a room and share the code with a friend.</p>
                </div>
                
                <div className="relative">
                  <div className="absolute inset-0 flex items-center">
                    <span className="w-full border-t border-purple-500/30" />
                  </div>
                  <div className="relative flex justify-center text-xs uppercase">
                    <span className="bg-slate-900 px-2 text-purple-300">Or</span>
                  </div>
                </div>
                
                <div className="space-y-4">
                  <Input
                    placeholder="ENTER ROOM CODE"
                    value={roomCode}
                    onChange={(e) => setRoomCode(e.target.value.toUpperCase())}
                    className="bg-black/30 border-purple-500/20 text-white placeholder:text-gray-400 text-center text-lg tracking-widest font-bold"
                    maxLength={6}
                  />
                  <Button
                    onClick={joinRoom}
                    disabled={!roomCode.trim()}
                    className="w-full bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 py-3"
                  >
                    <Search className="w-5 h-5 mr-2" />
                    Join Room
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Player Stats */}
            <Card className="bg-black/20 backdrop-blur-md border border-purple-500/20">
              <CardHeader>
                <CardTitle className="text-white">Your Profile</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="text-center">
                  <Avatar className="w-16 h-16 mx-auto mb-2">
                    <AvatarFallback className="text-lg font-bold">
                      {user.full_name?.charAt(0) || 'U'}
                    </AvatarFallback>
                  </Avatar>
                  <div className="text-white font-semibold">{user.full_name || 'Player'}</div>
                  <div className="text-purple-300">Level {userStats.level}</div>
                </div>
                
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div className="text-center">
                    <div className="text-white font-bold text-lg">{userStats.wins}</div>
                    <div className="text-purple-300">Wins</div>
                  </div>
                  <div className="text-center">
                    <div className="text-white font-bold text-lg">{userStats.losses}</div>
                    <div className="text-purple-300">Losses</div>
                  </div>
                  <div className="text-center">
                    <div className="text-white font-bold text-lg">
                      {userStats.wins + userStats.losses > 0 
                        ? Math.round((userStats.wins / (userStats.wins + userStats.losses)) * 100)
                        : 0}%
                    </div>
                    <div className="text-purple-300">Win Rate</div>
                  </div>
                  <div className="text-center">
                    <div className="text-white font-bold text-lg">{userStats.current_streak}</div>
                    <div className="text-purple-300">Streak</div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {gameState === 'waiting' && (
          <Card className="bg-black/20 backdrop-blur-md border border-purple-500/20">
            <CardHeader>
              <CardTitle className="text-white text-center">Waiting for Player</CardTitle>
            </CardHeader>
            <CardContent className="text-center space-y-6">
              <div className="flex items-center justify-center space-x-2">
                <Clock className="w-6 h-6 text-purple-400 animate-pulse" />
                <span className="text-purple-300">Waiting for another player to join...</span>
              </div>
              
              <div className="bg-black/30 rounded-lg p-6">
                <p className="text-white mb-2">Share this room code:</p>
                <div className="flex items-center justify-center gap-2">
                  <span className="text-3xl font-bold text-yellow-400 tracking-wider">{roomCode}</span>
                  <Button
                    onClick={copyRoomCode}
                    size="sm"
                    variant="outline"
                    className="border-purple-400 text-purple-300 hover:bg-purple-600/20"
                  >
                    <Copy className="w-4 h-4" />
                  </Button>
                </div>
              </div>
              
              <Button
                onClick={leaveMatch}
                variant="outline"
                className="border-red-500 text-red-400 hover:bg-red-600/20"
              >
                Cancel Match
              </Button>
            </CardContent>
          </Card>
        )}

        {gameState === 'playing' && currentMatch && (
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
            {/* Game Area */}
            <div className="lg:col-span-3">
              <Card className="bg-black/20 backdrop-blur-md border border-purple-500/20">
                <CardHeader className="border-b border-purple-500/20">
                  <div className="flex justify-between items-center">
                    <CardTitle className="text-white flex items-center gap-2">
                      <Trophy className="w-6 h-6" />
                      Round {currentMatch.round}/5
                    </CardTitle>
                    <div className="flex gap-4">
                      <Badge className="bg-blue-500 text-white">
                        You: {currentMatch.player1_id === user.id ? currentMatch.player1_score : currentMatch.player2_score}
                      </Badge>
                      <Badge className="bg-red-500 text-white">
                        Opponent: {currentMatch.player1_id === user.id ? currentMatch.player2_score : currentMatch.player1_score}
                      </Badge>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="p-0">
                  {isMyTurn() ? (
                    <div className="relative">
                      <PenaltyGame
                        onGoal={() => handleShot('goal')}
                        onMiss={() => handleShot('miss')}
                        onSave={() => handleShot('save')}
                        isActive={true}
                        selectedPlayer={null} // Can add player selection for multiplayer later
                        botLevel={2} // Opponent GK difficulty can be fixed or based on their stats
                      />
                      <div className="absolute top-4 right-4 bg-green-600 text-white rounded-lg px-3 py-1 animate-pulse">
                        Your Turn
                      </div>
                    </div>
                  ) : (
                    <div className="h-96 flex flex-col items-center justify-center text-center p-8">
                      <div className="animate-spin mb-4">
                        <Clock className="w-16 h-16 mx-auto text-purple-400" />
                      </div>
                      <h3 className="text-xl font-bold text-white mb-2">Waiting for opponent</h3>
                      <p className="text-purple-300">They are taking their penalty shot...</p>
                    </div>
                  )}
                  
                  {shotResult && (
                    <div className="absolute inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center">
                      <div className={`text-6xl font-bold ${
                        shotResult === 'goal' ? 'text-green-500' : 
                        shotResult === 'save' ? 'text-yellow-500' : 'text-red-500'
                      }`}>
                        {shotResult === 'goal' ? 'GOAL!' : 
                         shotResult === 'save' ? 'SAVED!' : 'MISS!'}
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>

            {/* Match Info */}
            <div className="space-y-4">
              <Card className="bg-black/20 backdrop-blur-md border border-purple-500/20">
                <CardHeader>
                  <CardTitle className="text-white text-sm">Match Info</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="text-center">
                    <div className="text-purple-300 text-sm">Room Code</div>
                    <div className="text-white font-bold">{currentMatch.room_id}</div>
                  </div>
                  
                  <div className="border-t border-purple-500/20 pt-3">
                    <div className="text-purple-300 text-sm mb-2">Turn Order</div>
                    <div className="space-y-1">
                      <div className={`text-sm ${currentMatch.current_turn === 'player1' ? 'text-green-400' : 'text-gray-400'}`}>
                        Player 1: {currentMatch.player1_id === user.id ? 'You' : 'Opponent'}
                      </div>
                      <div className={`text-sm ${currentMatch.current_turn === 'player2' ? 'text-green-400' : 'text-gray-400'}`}>
                        Player 2: {currentMatch.player2_id === user.id ? 'You' : 'Opponent'}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Button
                onClick={leaveMatch}
                variant="outline"
                className="w-full border-red-400 text-red-300 hover:bg-red-600/20"
              >
                Forfeit Match
              </Button>
            </div>
          </div>
        )}

        {gameState === 'finished' && currentMatch && (
          <Card className="bg-black/20 backdrop-blur-md border border-purple-500/20">
            <CardHeader>
              <CardTitle className="text-white text-center">Match Finished!</CardTitle>
            </CardHeader>
            <CardContent className="text-center space-y-6">
              <div className="text-6xl mb-4">
                {currentMatch.winner === user.id ? '🏆' : (currentMatch.winner === 'draw' ? '🤝' : '😢')}
              </div>
              
              <div>
                <h2 className="text-2xl font-bold text-white mb-2">
                  {currentMatch.winner === user.id ? 'Victory!' : (currentMatch.winner === 'draw' ? 'Draw!' : 'Defeat!')}
                </h2>
                <p className="text-purple-300">
                  Final Score: {currentMatch.player1_id === user.id ? currentMatch.player1_score : currentMatch.player2_score} - {currentMatch.player1_id === user.id ? currentMatch.player2_score : currentMatch.player1_score}
                </p>
              </div>
              
              <div className="flex gap-4 justify-center">
                <Button onClick={() => setGameState('menu')} className="bg-gradient-to-r from-blue-500 to-purple-600">
                  Back to Menu
                </Button>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
